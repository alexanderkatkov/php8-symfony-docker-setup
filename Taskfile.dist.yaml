version: '3'

env:
  ENV: ${ENV} | default dev
  APP: app

dotenv: [ '.env', '.env.{{ENV}}' ]

vars:
  DOCKER: docker
  TMP_INSTALL_FOLDER: ./tmp-install

includes:
  app: ./taskfiles/AppTasks.yaml
  composer: ./taskfiles/ComposerTasks.yaml
  docker: ./taskfiles/DockerTasks.yaml
  lint: ./taskfiles/LintTasks.yaml
  phpunit: ./taskfiles/PhpUnitTasks.yaml

tasks:
  bin/console:
    desc: 'Symfony "bin/console" util shortcut: "task bin/console -- cache:clear"'
    cmds:
      - task: app:exec
        vars: { CLI_ARGS: "bin/console {{.CLI_ARGS}}" }

  lint:
    desc: "Run all linting tasks"
    cmds:
      - task: lint:all

  phpunit:
    desc: "Run all PHPUnit tests"
    cmds:
      - task: phpunit:all

  create-skeleton:
    silent: true
    desc: "Create empty Symfony Skeleton project"
    cmds:
      - chmod +x ./taskfiles/helpers/ask.sh
      - "./taskfiles/helpers/ask.sh 'It will create new project and override existing project files! Are you sure (y/n)'"
      - echo -e "\n<<<<<<< Removing TMP folder if exists >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "rm -rf {{.TMP_INSTALL_FOLDER}}" }
      - echo -e "<<<<<<< Creating new TMP folder >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "mkdir {{.TMP_INSTALL_FOLDER}}" }
      - echo -e "<<<<<<< Downloading Symfony cache >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "composer create-project symfony/skeleton {{.TMP_INSTALL_FOLDER}}" }
      - echo -e "<<<<<<< Importing ENV file contents >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "cat {{.TMP_INSTALL_FOLDER}}/.env >> .env" }
      - task: app:exec
        vars: { CLI_ARGS: "rm -f {{.TMP_INSTALL_FOLDER}}/.env" }
      - echo -e "<<<<<<< Importing .gitignore file contents >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "cat {{.TMP_INSTALL_FOLDER}}/.gitignore >> .gitignore" }
      - task: app:exec
        vars: { CLI_ARGS: "rm -f {{.TMP_INSTALL_FOLDER}}/.gitignore" }
      - echo -e "<<<<<<< Copying project files >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "cp -fR {{.TMP_INSTALL_FOLDER}}/. ./" }
      - echo -e "<<<<<<< Removing TMP folder if exists >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "rm -rf {{.TMP_INSTALL_FOLDER}}" }
      - echo -e "<<<<<<< Resolving VAR folder file permissions >>>>>>>"
      - task: app:exec
        vars: { CLI_ARGS: "/bin/var/var-folder-file-permissions.sh" }

  install-dev-base:
    silent: true
    desc: "Install base dev packages for a project"
    cmds:
      - task: app:exec
        vars: { CLI_ARGS: "composer config --no-plugins allow-plugins.phpstan/extension-installer true" }
      - task: app:exec
        vars: { CLI_ARGS: "composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "symfony/maker-bundle" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "symfony/test-pack" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "phpstan/phpstan" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "phpstan/extension-installer" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "phpstan/phpstan-symfony" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "phpstan/phpstan-phpunit" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "phpstan/phpstan-doctrine" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "squizlabs/php_codesniffer=*" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "slevomat/coding-standard" }
      - task: composer:require-dev
        vars: { CLI_ARGS: "php-parallel-lint/php-parallel-lint" }

  del-skeleton:
    cmds:
      - sudo rm -rf bin composer.json composer.lock config .env.test public/index.php src/ supervisord.pid symfony.lock tests var vendor phpunit.xml.dist
